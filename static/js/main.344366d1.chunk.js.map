{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["wait","ms","Promise","res","setTimeout","App","useState","IsCopied","setIsCopied","password","setPassword","length","setLength","uppercase","lowercase","numbers","symbols","checkboxes","setCheckboxes","handleCheckbox","e","target","name","checked","a","className","id","text","onClick","onChange","Number","value","handleLengthRange","type","min","max","defaultChecked","pass","chars","Array","fill","map","x","Math","floor","random","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAIMA,EAAO,SAACC,GAAD,OAAgB,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAKF,OAuHnDI,MArHf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACIC,EADJ,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGeJ,mBAAiB,IAHhC,mBAGNK,EAHM,KAGEC,EAHF,OAIuBN,mBAAS,CAC3CO,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,SAAS,IARE,mBAINC,EAJM,KAIMC,EAJN,KAkCb,SAASC,EAAeC,GACtBF,EAAc,2BACTD,GADQ,kBAEVG,EAAEC,OAAOC,OAASF,EAAEC,OAAOE,WArCnB,4CAyCb,sBAAAC,EAAA,6DACEhB,GAAY,GADd,SAEQR,EAAK,KAFb,OAGEQ,GAAY,GAHd,4CAzCa,sBA+Cb,OACE,sBAAKiB,UAAU,YAAf,UACE,oDACA,sBAAKA,UAAU,mBAAf,UACE,sBAAMC,GAAG,SAAT,SAAmBjB,IACnB,cAAC,kBAAD,CAAiBkB,KAAMlB,EAAvB,SACE,wBAAQmB,QArDH,2CAqDwBH,UAAU,MAAMC,GAAG,YAAhD,SACGnB,EACC,mBAAGkB,UAAU,iBAEb,mBAAGA,UAAU,4BAKrB,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,UAAf,UACE,sDAAyBd,KACzB,uBACEkB,SAAU,SAACT,GAAD,OApCpB,SAA2BA,GACzBR,EAAUkB,OAAOV,EAAEC,OAAOU,QAmCDC,CAAkBZ,IACnCa,KAAK,QACLC,IAAI,IACJC,IAAI,KACJJ,MAAOpB,OAGX,sBAAKc,UAAU,UAAf,UACE,8DACA,uBACEG,QAAS,SAACR,GAAD,OAAOD,EAAeC,IAC/Ba,KAAK,WACLX,KAAK,YACLc,eAAgBnB,EAAWJ,eAG/B,sBAAKY,UAAU,UAAf,UACE,8DACA,uBACEG,QAAS,SAACR,GAAD,OAAOD,EAAeC,IAC/Ba,KAAK,WACLX,KAAK,YACLc,eAAgBnB,EAAWH,eAG/B,sBAAKW,UAAU,UAAf,UACE,oDACA,uBACEG,QAAS,SAACR,GAAD,OAAOD,EAAeC,IAC/Ba,KAAK,WACLX,KAAK,UACLc,eAAgBnB,EAAWF,aAG/B,sBAAKU,UAAU,UAAf,UACE,oDACA,uBACEG,QAAS,SAACR,GAAD,OAAOD,EAAeC,IAC/Ba,KAAK,WACLX,KAAK,UACLc,eAAgBnB,EAAWD,gBAIjC,wBAAQY,QAnGZ,WACE,IACIS,EADAC,EAAQ,GAGRrB,EAAWJ,YAAWyB,GAAS,8BAC/BrB,EAAWH,YAAWwB,GAAS,8BAC/BrB,EAAWF,UAASuB,GAAS,cAC7BrB,EAAWD,UAASsB,GAAS,gCAEjCD,EAAOE,MAAM5B,GACV6B,KAAKF,GACLG,KAAI,SAAUC,GACb,OAAOA,EAAEC,KAAKC,MAAMD,KAAKE,SAAWH,EAAE/B,YAEvCmC,KAAK,IAERpC,EAAY2B,IAmFiBZ,UAAU,gBAAgBC,GAAG,WAAxD,mCCtGSqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.344366d1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"./App.css\";\n\nconst wait = (ms: number) => new Promise((res) => setTimeout(res, ms));\n\nfunction App() {\n  const [IsCopied, setIsCopied] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [length, setLength] = useState<number>(16);\n  const [checkboxes, setCheckboxes] = useState({\n    uppercase: true,\n    lowercase: true,\n    numbers: true,\n    symbols: true,\n  });\n\n  function generate() {\n    let chars = \"\";\n    let pass = \"\";\n\n    if (checkboxes.uppercase) chars += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (checkboxes.lowercase) chars += \"abcdefghijklmnopqrstuvwxyz\";\n    if (checkboxes.numbers) chars += \"0123456789\";\n    if (checkboxes.symbols) chars += \"~!@#$%^&*()_+-=,<.>/?;:[{]}|\";\n\n    pass = Array(length)\n      .fill(chars)\n      .map(function (x) {\n        return x[Math.floor(Math.random() * x.length)];\n      })\n      .join(\"\");\n\n    setPassword(pass);\n  }\n\n  function handleLengthRange(e: any) {\n    setLength(Number(e.target.value));\n  }\n\n  function handleCheckbox(e: any) {\n    setCheckboxes({\n      ...checkboxes,\n      [e.target.name]: !!e.target.checked,\n    } as typeof checkboxes);\n  }\n\n  async function changeIcon() {\n    setIsCopied(true);\n    await wait(500);\n    setIsCopied(false);\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>Password Generator</h2>\n      <div className=\"result-container\">\n        <span id=\"result\">{password}</span>\n        <CopyToClipboard text={password}>\n          <button onClick={changeIcon} className=\"btn\" id=\"clipboard\">\n            {IsCopied ? (\n              <i className=\"fas fa-check\"></i>\n            ) : (\n              <i className=\"far fa-clipboard\"></i>\n            )}\n          </button>\n        </CopyToClipboard>\n      </div>\n      <div className=\"settings\">\n        <div className=\"setting\">\n          <label>Password length: {length}</label>\n          <input\n            onChange={(e) => handleLengthRange(e)}\n            type=\"range\"\n            min=\"8\"\n            max=\"32\"\n            value={length}\n          />\n        </div>\n        <div className=\"setting\">\n          <label>Include uppercase letters</label>\n          <input\n            onClick={(e) => handleCheckbox(e)}\n            type=\"checkbox\"\n            name=\"uppercase\"\n            defaultChecked={checkboxes.uppercase}\n          />\n        </div>\n        <div className=\"setting\">\n          <label>Include lowercase letters</label>\n          <input\n            onClick={(e) => handleCheckbox(e)}\n            type=\"checkbox\"\n            name=\"lowercase\"\n            defaultChecked={checkboxes.lowercase}\n          />\n        </div>\n        <div className=\"setting\">\n          <label>Include numbers</label>\n          <input\n            onClick={(e) => handleCheckbox(e)}\n            type=\"checkbox\"\n            name=\"numbers\"\n            defaultChecked={checkboxes.numbers}\n          />\n        </div>\n        <div className=\"setting\">\n          <label>Include symbols</label>\n          <input\n            onClick={(e) => handleCheckbox(e)}\n            type=\"checkbox\"\n            name=\"symbols\"\n            defaultChecked={checkboxes.symbols}\n          />\n        </div>\n      </div>\n      <button onClick={generate} className=\"btn btn-large\" id=\"generate\">\n        Generate password\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}